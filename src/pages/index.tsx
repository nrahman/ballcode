import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { Header } from "~/components/Header";
import { useState } from "react";

import { api, type RouterOutputs } from "~/utils/api";
import NoteEditor from "~/components/NoteEditor";
import NoteCard from "~/components/NoteCard";


const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({
    text: 'world',
  });

  return (
    <>
      <Head>
        <title>Notetaker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
              <Header />
              <Content />

      </main>

    
    </>
  );
};

export default Home;

type Topic = RouterOutputs["topic"]["getAll"][0]

const Content: React.FC = () => {
  const { data: sessionData}  = useSession();
  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null)

  const { data: topics, refetch: refetchTopics} = api.topic.getAll.useQuery(
    undefined,//no input
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data)=>{
        setSelectedTopic(selectedTopic ?? data[0] ?? null)
      }
    }
  );

  const createTopic = api.topic.create.useMutation({
    onSuccess:()=>{
     void refetchTopics()
    }
  })

  const deleteTopic = api.topic.deleteTopic.useMutation({
    onSuccess:()=>{
      void refetchTopics()
      setSelectedTopic(null)

    }
  })

  const { data: notes, refetch: refetchNotes} = api.note.getAll.useQuery(
   {
    topicId: selectedTopic?.id ?? ""
   },
    {
      enabled: sessionData?.user !== undefined && selectedTopic !== null,
    }
  );

  const createNote = api.note.create.useMutation({
    onSuccess:()=>{
     void refetchNotes()
    }
  })

  const deleteNote = api.note.delete.useMutation({
    onSuccess:()=>{
      void refetchNotes()
    }
  })
    return (
      <div className="mx-5 mt-5 md:grid md:grid-cols-4 gap-2">
        <div className="px-2">
          <h1 className="text-xl uppercase font-thin py-4 text-center">Topics</h1>
          <ul className="menu rounded-box bg-base-100 p-2">
            {topics?.map((topic)=>(
              <li key={topic.id} className="flex flex-row flex-nowrap justify-between items-center">
                <a 
                className=""
                href="#"
                onClick={(evt)=>{
                  evt.preventDefault()
                setSelectedTopic(topic) }}
                
                >{topic.title}</a>
                <button
                onClick={()=>void deleteTopic.mutate({id:topic.id})}
                className="btn-warning btn-xs uppercase px-5 font-bold">Delete</button></li>
            )

            )}
          </ul>
          <input
            type="text"
            placeholder="Add New topic"
            className="input-bordered input md:input-sm w-full"
            onKeyDown={(e)=>{
              if(e.key === "Enter"){
                createTopic.mutate({
                  title:e.currentTarget.value,
                })
                e.currentTarget.value = ""
              }
            }}
            />
        </div>
        <div className="col-span-3">
          <h2 className="text-lg py-4 uppercase font-thin text-center underline">Notes</h2>
            <h1 className="text-md text-center">{selectedTopic?.title}</h1>
          <div>
            {notes?.map((note)=>(
              <div key={note.id} className="mt-5">
                <NoteCard
                  note={note}
                  onDelete={()=>void deleteNote.mutate({id:note.id})}
                />


              </div>
            ))}
          </div>
          <NoteEditor onSave={({title, content})=>{
            void createNote.mutate({
              title,
              content,
              topicId: selectedTopic?.id ?? "",
            })
          }} />
        </div>
      </div>
      )
  
}



// const AuthShowcase: React.FC = () => {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = api.example.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined },
//   );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-center text-2xl text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// };
